(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*!
 * FEATURE.JS 1.0.0, A Fast, simple and lightweight browser feature
 * detection library in just 1kb.
 *
 * http://featurejs.com
 *
 * CSS 3D Transform, CSS Transform, CSS Transition, Canvas, SVG,
 * addEventListener, querySelectorAll, matchMedia, classList API,
 * placeholder, localStorage, History API, Viewport Units, REM Units,
 * CORS, WebGL, Service Worker, Context Menu, Geolocation,
 * Device Motion, Device Orientation, Touch, Async, Defer,
 * Srcset, Sizes & Picture Element.
 *
 *
 * USAGE EXAMPLE:
 * if (feature.webGL) {
 *   console.log("webGL supported!");
 * }
 *
 * Author: @viljamis, https://viljamis.com
 */

/* globals DocumentTouch */
;(function (window, document, undefined) {
  "use strict";

  // For minification only
  var docEl = document.documentElement;


  /**
   * Utilities
   */
  var util = {

    /**
     * Simple create element method
     */
    create : function(el) {
      return document.createElement(el);
    },

    /**
     * Test if it's an old device that we want to filter out
     */
    old : !!(/(Android\s(1.|2.))|(Silk\/1.)/i.test(navigator.userAgent)),

    /**
     * Function that takes a standard CSS property name as a parameter and
     * returns it's prefixed version valid for current browser it runs in
     */
    pfx : (function() {
      var style = document.createElement("dummy").style;
      var prefixes = ["Webkit", "Moz", "O", "ms"];
      var memory = {};
      return function(prop) {
        if (typeof memory[prop] === "undefined") {
          var ucProp = prop.charAt(0).toUpperCase() + prop.substr(1),
            props = (prop + " " + prefixes.join(ucProp + " ") + ucProp).split(" ");
            memory[prop] = null;
          for (var i in props) {
            if (style[props[i]] !== undefined) {
              memory[prop] = props[i];
              break;
            }
          }
        }
        return memory[prop];
      };
    })()

  };


  /**
   * The Feature.js object
   */

  var Feature = {
    // Test if CSS 3D transforms are supported
    css3Dtransform : (function() {
      var test = (!util.old && util.pfx("perspective") !== null);
      return !!test;
    })(),

    // Test if CSS transforms are supported
    cssTransform : (function() {
      var test = (!util.old && util.pfx("transformOrigin") !== null);
      return !!test;
    })(),

    // Test if CSS transitions are supported
    cssTransition : (function() {
      var test = util.pfx("transition") !== null;
      return !!test;
    })(),

    // Test if addEventListener is supported
    addEventListener : !!window.addEventListener,

    // Test if querySelectorAll is supported
    querySelectorAll : !!document.querySelectorAll,

    // Test if matchMedia is supported
    matchMedia : !!window.matchMedia,

    // Test if Device Motion is supported
    deviceMotion : ("DeviceMotionEvent" in window),

    // Test if Device Orientation is supported
    deviceOrientation : ("DeviceOrientationEvent" in window),

    // Test if Context Menu is supported
    contextMenu : ("contextMenu" in docEl && "HTMLMenuItemElement" in window),

    // Test if classList API is supported
    classList : ("classList" in docEl),

    // Test if placeholder attribute is supported
    placeholder : ("placeholder" in util.create("input")),

    // Test if localStorage is supported
    localStorage : (function() {
      var test = "x";
      try {
        localStorage.setItem(test, test);
        localStorage.removeItem(test);
        return true;
      } catch(err) {
        return false;
      }
    })(),

    // Test if History API is supported
    historyAPI : (window.history && "pushState" in window.history),

    // Test if ServiceWorkers are supported
    serviceWorker : ("serviceWorker" in navigator),

    // Test if viewport units are supported
    viewportUnit : (function(el) {
      try {
        el.style.width = "1vw";
        var test = el.style.width !== "";
        return !!test;
      } catch(err) {
        return false;
      }
    })(util.create("dummy")),

    // Test if REM units are supported
    remUnit : (function(el) {
      try {
        el.style.width = "1rem";
        var test = el.style.width !== "";
        return !!test;
      } catch(err) {
        return false;
      }
    })(util.create("dummy")),

    // Test if Canvas is supported
    canvas : (function(el) {
      return !!(el.getContext && el.getContext("2d"));
    })(util.create("canvas")),

    // Test if SVG is supported
    svg : !!document.createElementNS && !!document.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGRect,

    // Test if WebGL is supported
    webGL : (function(el) {
      try {
        return !!(window.WebGLRenderingContext && (el.getContext("webgl") || el.getContext("experimental-webgl")));
      } catch(err) {
        return false;
      }
    })(util.create("canvas")),

    // Test if cors is supported
    cors : ("XMLHttpRequest" in window && "withCredentials" in new XMLHttpRequest()),

    // Tests if touch events are supported, but doesn't necessarily reflect a touchscreen device
    touch : !!(("ontouchstart" in window) || window.navigator && window.navigator.msPointerEnabled && window.MSGesture || window.DocumentTouch && document instanceof DocumentTouch),

    // Test if async attribute is supported
    async : ("async" in util.create("script")),

    // Test if defer attribute is supported
    defer : ("defer" in util.create("script")),

    // Test if Geolocation is supported
    geolocation : ("geolocation" in navigator),

    // Test if img srcset attribute is supported
    srcset : ("srcset" in util.create("img")),

    // Test if img sizes attribute is supported
    sizes : ("sizes" in util.create("img")),

    // Test if Picture element is supported
    pictureElement : ("HTMLPictureElement" in window),

    // Run all the tests and add supported classes
    testAll : function() {
      var classes = " js";
      for (var test in this) {
        if (test !== "testAll" && test !== "constructor" && this[test]) {
          classes += " " + test;
        }
      }
      docEl.className += classes.toLowerCase();
    }

  };

  /**
   * Expose a public-facing API
   */
  window.feature = Feature;

}(window, document));

},{}],2:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.12.2
(function() {
  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - nodeLoadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    moduleLoadTime = getNanoSeconds();
    upTime = process.uptime() * 1e9;
    nodeLoadTime = moduleLoadTime - upTime;
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);



}).call(this,require('_process'))
},{"_process":3}],3:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],4:[function(require,module,exports){
(function (global){
var now = require('performance-now')
  , root = typeof window === 'undefined' ? global : window
  , vendors = ['moz', 'webkit']
  , suffix = 'AnimationFrame'
  , raf = root['request' + suffix]
  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]

for(var i = 0; !raf && i < vendors.length; i++) {
  raf = root[vendors[i] + 'Request' + suffix]
  caf = root[vendors[i] + 'Cancel' + suffix]
      || root[vendors[i] + 'CancelRequest' + suffix]
}

// Some versions of FF have rAF but not cAF
if(!raf || !caf) {
  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last))
      last = next + _now
      setTimeout(function() {
        var cp = queue.slice(0)
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0
        for(var i = 0; i < cp.length; i++) {
          if(!cp[i].cancelled) {
            try{
              cp[i].callback(last)
            } catch(e) {
              setTimeout(function() { throw e }, 0)
            }
          }
        }
      }, Math.round(next))
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    })
    return id
  }

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true
      }
    }
  }
}

module.exports = function(fn) {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  return raf.call(root, fn)
}
module.exports.cancel = function() {
  caf.apply(root, arguments)
}
module.exports.polyfill = function(object) {
  if (!object) {
    object = root;
  }
  object.requestAnimationFrame = raf
  object.cancelAnimationFrame = caf
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"performance-now":2}],5:[function(require,module,exports){
'use strict';

var dragscroll = require('./modules/dragscroll');

function App() {
    // Store constants here
    this.c = {
        apiKey: 'c6dc8581507548e535e52e8cdb1dfde6',
        userId: '141580833@N07',
        photoPrefix: 'CWP - ',
        photosets: [],
        activeSet: 0,
        albumRetries: 0,

        el: {
            $nav: $('#page-nav-container')
        }
    };
};

App.prototype = {
    init: function init() {
        this.bindEvents();
        this.route();
    },

    bindEvents: function bindEvents() {
        $(window).on('hashchange', function () {
            this.route();
        }.bind(this));

        dragscroll.bind();
    },

    route: function route() {
        var curUrl = location.hash.split('#')[1] || '';

        // First load - fetch photosets
        if (this.c.photosets.length == 0) {
            this.getPhotosets();
            return;
        }

        // Check if any photoset === current URL
        var photosetToSelect = this.c.photosets.find(function (obj) {
            return obj.title.toLowerCase() === curUrl.toLowerCase();
        });

        // No photosets match URL - change url to first photoset and trigger a 'replace'
        if (!photosetToSelect) {
            location.replace('#' + this.c.photosets[0].title);
            return;
        } else {
            this.c.activeSet = photosetToSelect.id;
        }

        this.selectNavElement(photosetToSelect.title);
        this.getPhotos();
    },

    selectNavElement: function selectNavElement(title) {
        var $albumList = $('#album-list');

        $albumList.find('.active').removeClass('active');
        $albumList.find('a[href="#' + title + '"]').addClass('active');
    },

    getPhotosets: function getPhotosets() {
        var xhr = $.get('https://api.flickr.com/services/rest/?method=flickr.photosets.getList&api_key=' + this.c.apiKey + '&user_id=' + this.c.userId);
        var self = this;

        // Clear the array, just in case there are issues with back/forward clickthroughs
        this.c.photosets = [];

        // @TODO - check localstorage for stored version. Album list could be updated every 15 minutes instead of on pageload.
        // ---------------

        xhr.done(function (data) {
            $(data).find('photoset').each(function () {
                var $this = $(this);
                var title = $this.find('title').text();

                if (title.indexOf(self.c.photoPrefix) !== 0) return;

                self.c.photosets.push({
                    title: title.split(self.c.photoPrefix)[1],
                    id: this.id
                });
            });

            self.renderAlbumList();
            self.route();
        });

        xhr.fail(function (err) {
            if (self.c.albumRetries < 3) {
                self.c.albumRetries++;
                self.getPhotosets();
                return;
            }

            // Album list couldn't be loaded
            $('#album-list').prepend('<p>Album list couldn\'t be loaded. Try <a href="/">refreshing the page</a></p>').find('.loading-container').remove();
        });
    },

    renderAlbumList: function renderAlbumList() {
        var html = '';
        this.c.photosets.forEach(function (obj) {
            html += '<li><a href="#' + obj.title + '" data-album-id="' + obj.id + '">' + obj.title + '</a></li>';
        });

        $('#album-list').prepend(html).find('.loading-container').remove();
    },

    getPhotos: function getPhotos() {
        var xhr = $.get('https://api.flickr.com/services/rest/' + '?method=flickr.photosets.getPhotos' + '&api_key=' + this.c.apiKey + '&user_id=' + this.c.userId + '&photoset_id=' + this.c.activeSet + '&extras=description');
        var photos = [];
        var self = this;

        xhr.done(xhrDone);
        xhr.fail(xhrFail);

        function xhrDone(data) {
            $(data).find('photo').each(function (i, obj) {
                var url = 'https://farm' + obj.getAttribute('farm') + '.staticflickr.com/' + obj.getAttribute('server') + '/' + obj.getAttribute('id') + '_' + obj.getAttribute('secret') + '_b.jpg';

                var description = obj.getElementsByTagName('description')[0].innerHTML || '';

                photos.push({
                    url: url,
                    title: obj.getAttribute('title'),
                    description: description
                });
            });

            self.renderPhotos(photos);
        };

        function xhrFail(err) {
            // @TODO - add error message saying images couldn't be loaded
            console.error(err);
        };
    },

    renderPhotos: function renderPhotos(photos) {
        var html = '';

        $.each(photos, function (i, obj) {
            html += '<img src="' + obj.url + '" alt="' + (obj.description || '') + '" data-title="' + (obj.title || '') + '" />';
        });

        $('#photo-container').html(html);
    }
};

var app = new App();
app.init();

},{"./modules/dragscroll":6}],6:[function(require,module,exports){
'use strict';

var raf = require('raf');
var feature = require('feature.js');

function dragScroll() {
    var tickInterval = 20;
    var decel = 1.12; // deceleration - higher = faster

    var originXPos = 0;
    var originXScroll = 0;
    var curXPos = 0;
    var curDown = false;
    var xPosArr = [];
    var mouseTicker;

    function getPageScroll() {
        return window.pageXOffset || document.documentElement.scrollLeft;
    }

    function mouseDown(e) {
        curDown = true;
        originXScroll = getPageScroll();
        originXPos = curXPos = e.clientX;
        xPosArr = [e.clientX];

        mouseTicker = setInterval(tick, tickInterval);
    }

    function tick() {
        xPosArr.unshift(curXPos);
    }

    function mouseMove(e) {
        if (curDown === false) return;

        // Set curXPos for mouse interval (it is used to add to the xPosArr)
        curXPos = e.clientX;

        setDocScroll();
    }

    function setDocScroll() {
        var delta = originXPos - curXPos;
        var newScrollLeft = originXScroll + delta;

        if (newScrollLeft < 0) newScrollLeft = 0;

        window.scrollTo(newScrollLeft, document.body.scrollTop);
    }

    function mouseUp(e) {
        if (curDown === false) return;
        curDown = false;

        clearInterval(mouseTicker);

        animScroll();
    }

    function mouseWheel(e) {
        if (e.deltaY === 0) return;

        // Emulate a mouse flick
        xPosArr = [0, e.deltaY];

        animScroll();
    }

    function animScroll() {
        if (xPosArr.length < 2) return;

        var delta = xPosArr[0] - xPosArr[1];
        var dist = Math.round(delta / decel);

        raf(function animLoop() {
            if (dist <= 1 && dist >= -1) {
                raf.cancel(animLoop);
                return;
            }

            window.scrollTo(getPageScroll() - dist, 0);

            // Keep reducing distance until it gets < | > 1
            dist = dist / decel;

            raf(animLoop);
        });
    }

    return {
        bind: function bind() {
            if (feature.touch || $(window).width() <= 480) return;

            window.addEventListener('mousedown', mouseDown);
            window.addEventListener('mousemove', mouseMove);
            window.addEventListener('mouseup', mouseUp);
            window.addEventListener('wheel', mouseWheel);
        },
        unbind: function unbind() {
            window.removeEventListener('mousedown', mouseDown);
            window.removeEventListener('mousemove', mouseMove);
            window.removeEventListener('mouseup', mouseUp);
        }
    };
}

module.exports = new dragScroll();

},{"feature.js":1,"raf":4}]},{},[5]);
